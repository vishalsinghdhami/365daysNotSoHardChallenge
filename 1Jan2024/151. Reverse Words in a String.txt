// O(n) space solution
// push each part of string to stack then make a string by popping and adding
class Solution {
public:
    string reverseWords(string s) {
        string temp = "";
        stack<string> st;

        for(int i=0;i<s.size();i++){
            char ch = s[i];
            if(ch ==' '){
                if(temp!=""){
                    st.push(temp);
                }
                temp = "";
            }
            else{
                temp+=ch;
            }
        }
        if(temp!=""){
            st.push(temp);
        }

        string ans="";
        while(!st.empty()){
            ans+= (st.top() + " ");
            st.pop();
        }    
        ans.pop_back();
        return ans;    
    }
};
// O (1) space in c++
class Solution {
public:
    void rev(string& s, int l, int r) {
        while (l < r) {
            swap(s[l++], s[r--]);
        }
    }
    string reverseWords(string s) {
        int i, j, n = s.length();
        i = 0;

        rev(s, 0, n - 1);
        while (i < n) {
            // Remove leading spaces
            j = i;
            while (j < n && s[j] == ' '){
                j++;
            }

            int cnt = 0;

            while (j < n && s[j] != ' ') {
                j++;
                cnt++;
            }

            if (j > n){
                break;
            }
            j--;

            if (i == 0)
                rev(s, i, j);
            else
                rev(s, i + 1, j);

            if (cnt == 0)
                i = j + 1;
            else
                i = i + cnt;
        }

        int k = n - 1;
        while (k >= 0 && s[k] == ' ') {
            k--;
            s.pop_back();
        }
        return s;
    }
};